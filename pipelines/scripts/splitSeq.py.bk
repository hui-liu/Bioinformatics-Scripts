import sys
from Bio import SeqIO
import os
import shutil
import binpacking
from small_tools import open_file as open

inFa = sys.argv[1]
outDir = sys.argv[2]
try: partNo = int(sys.argv[3])
except: partNo = 16

def mknewDir(Dir):
	if os.path.exists(Dir):
#		shutil.rmtree(Dir)
#		os.makedirs(Dir)
		pass
	else:
		os.makedirs(Dir)

def split_seq(inFa,outDir,split_part):
	i = 0
	for record in SeqIO.parse(inFa,'fasta'):
		i += 1
		out_file = '%s/%0*d.fa' % (outDir, 3, i/split_part)
		f = open(out_file,'a')
		SeqIO.write(record,f,'fasta')
		f.close()
	return i

def seq_num(inFa):
	return sum([1 for record in SeqIO.parse(inFa,'fasta')])

def split_by_size(inFa, outDir, nbins):
	d_seq = {}
	d_len = {}
	for rc in SeqIO.parse(open(inFa), 'fasta'):
		d_seq[rc.id] = rc
		d_len[rc.id] = len(rc.seq)
	bins = binpacking.to_constant_bin_number(d_len, nbins)
	i = 0
	j = 0
	num = len(str(nbins))
	for d_bin in bins:
		i += 1
		out_file = '%s/%0*d.fa' % (outDir, num, i)
		f = open(out_file,'w')
		for id in d_bin.keys():
			j +=1
			SeqIO.write(d_seq[id],f,'fasta')
		f.close()
	return j
	
mknewDir(outDir)
bysize = True

if bysize:
	finalSeq = split_by_size(inFa, outDir, partNo)
else: # by seq number
	totalSeq = seq_num(inFa)
	split_part = totalSeq/partNo + 1

	finalSeq = split_seq(inFa,outDir,split_part)

#if totalSeq == finalSeq:
#	print 'good'
